events {
    worker_connections 1024; # Allows up to 1024 simultaneous connections per worker
}

# http block
http {

    # Setting status code for the limiting API rate
    limit_req_status 429;

    # Setting API Limit to 10m for medium traffic it can be 2m for Low, 5m to 10m for Medium and 50 for High 
    # Limit the number of requests to 5 per second per client with a size of zone 10mb
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;

    # Define upstreams pointing to your local services
    # Use Docker name if we are using docker and if local then use locahost
    upstream user_service {
        server user-service:3002;  # User Service runs on port 3001
    }

    upstream product_service {
        server product-service:3001;  # Product Service runs on port 3002
    }

    # Server block for handling requests on port 8080
    server {
        listen 8080;            # Nginx listens on port 8080
        server_name localhost;  # Use localhost or 127.0.0.1

        # Route requests to /users to the User Service
        location /users {
            limit_req zone=api_limit burst=1 nodelay;
            error_page 429 /ratelimit.json;
            proxy_pass http://user_service;  # Pass full path (e.g., /users/foo → User Service's /users/foo)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route requests to /products to the Product Service
        location /products {
            limit_req zone=api_limit burst=1 nodelay;
            error_page 429 /ratelimit.json;
            proxy_pass http://product_service;  # Pass full path (e.g., /products/bar → Product Service's /products/bar)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

         # Custom error response for rate limits
        error_page 429 /ratelimit.json;
        location = /ratelimit.json {
            internal;
            return 429 '{"error": "Too many requests", "code": 429}';
        }

        # Optional: Handle 404 errors
        error_page 404 /404.json;
        location = /404.json {
            internal;
            return 404 '{"error": "Route not found"}';
        }
    }
}